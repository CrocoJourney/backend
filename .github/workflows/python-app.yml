name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  COMPOSE_PROJECT_NAME: "croco"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Start services
        run: docker-compose -f "docker-compose.action.yml" up -d

      - name: download wait-for-it.sh
        run: |
          wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh

      - name: Get postgres IP
        run: |
          echo "POSTGRES_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' croco_postgres)" >> $GITHUB_ENV

      - name: Get redis IP
        run: |
          echo "REDIS_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' croco_redis)" >> $GITHUB_ENV

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Wait for Postgres
        run: |
          ./wait-for-it.sh -t 0 ${{ env.POSTGRES_HOST }}:5432

      - name: Wait for Redis
        run: |
          ./wait-for-it.sh -t 0 ${{ env.REDIS_HOST }}:6379

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        env:
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          REDIS_HOST: ${{ env.REDIS_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_DB: 0
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          pytest tests
